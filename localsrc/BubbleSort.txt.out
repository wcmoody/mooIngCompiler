##### SOURCE CODE #####
##+1+13##
PROGRAM bubbleSort   
  DECLARE
      INTEGER VECTOR 5 numbers ;   
      INTEGER SCALAR swapped , index, length, temp, while ;
  END


     EXECUTE
	
	// we will load the values into the vector "numbers"
	numbers[0] <- 12 ;
	numbers[1] <- 1000 ;
	numbers[2] <- 40 ;
	numbers[3] <- -211 ;
	numbers[4] <- 8 ;
	
	length <- 5 ;

    STOUT "Original Numbers %d, %d, %d, %d, %d \n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4];

	
        swapped <- 1 ;
	index <-1;


    FOR while <-1 BY 0 UNTIL /*not*/ swapped>0 DO
	swapped <- 0;	
        FOR index <- 1 BY 1 UNTIL /*not*/ index < length DO 
        IF numbers[index-1] > numbers[index]  THEN
          temp <- numbers[index-1] ;
          numbers[index-1] <- numbers[index] ;
          numbers[index] <- temp ;
          swapped <- 1 ; // swapped is one if numbers swapped, 0 otherwise
        END; // end if       
	END; //end for (index)	
    END; // end for (while)
	
    STOUT "Final Numbers %d, %d, %d, %d, %d \n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4];
    
  END  // end execute
END
###### SOURCE CODE WITH FOURTUPLES #####
Name: John Ingram and W. Clay Moody
Email: {jei,wcm}@clemson.edu
Date: 2013/04/04 10:47:22



##+1+13##
PROGRAM bubbleSort   
  DECLARE
				Four Tuple is	(bubbleSort, BEGINPROGRAM, --, --)
      INTEGER VECTOR 5 numbers ;   
				Four Tuple is	(numbers, MEMORY, 5, 1)
      INTEGER SCALAR swapped , index, length, temp, while ;
				Four Tuple is	(swapped, MEMORY, 1, 1)
				Four Tuple is	(index, MEMORY, 1, 1)
				Four Tuple is	(length, MEMORY, 1, 1)
				Four Tuple is	(temp, MEMORY, 1, 1)
				Four Tuple is	(while, MEMORY, 1, 1)
  END


     EXECUTE
				Four Tuple is	(--, ENDDECLARATIONS, --, --)
	
	// we will load the values into the vector "numbers"
	numbers[0] <- 12 ;
				Four Tuple is	(main, LABEL, --, --)
				Four Tuple is	(numbers, SUBSTORE, 12, 0)
	numbers[1] <- 1000 ;
				Four Tuple is	(numbers, SUBSTORE, 1000, 1)
	numbers[2] <- 40 ;
				Four Tuple is	(numbers, SUBSTORE, 40, 2)
	numbers[3] <- -211 ;
				Four Tuple is	(I$0, IMINUS, 211, 0)
				Four Tuple is	(numbers, SUBSTORE, I$0, 3)
	numbers[4] <- 8 ;
				Four Tuple is	(numbers, SUBSTORE, 8, 4)
	
	length <- 5 ;
				Four Tuple is	(length, STORE, 5, --)

    STOUT "Original Numbers %d, %d, %d, %d, %d \n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4];
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "Original Numbers %d, %d, %d, %d, %d \n", --)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 0)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 1)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 2)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 3)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 4)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)

	
        swapped <- 1 ;
				Four Tuple is	(swapped, STORE, 1, --)
	index <-1;
				Four Tuple is	(index, STORE, 1, --)


    FOR while <-1 BY 0 UNTIL /*not*/ swapped>0 DO
				Four Tuple is	(while, STORE, 1, --)
				Four Tuple is	(L$1, JUMP, --, --)
				Four Tuple is	(L$0, LABEL, --, --)
				Four Tuple is	(I$1, IADD, 0, while)
				Four Tuple is	(while, STORE, I$1, --)
				Four Tuple is	(L$1, LABEL, --, --)
	swapped <- 0;	
				Four Tuple is	(B$0, IGT, swapped, 0)
				Four Tuple is	(L$2, CJUMPF, B$0, --)
				Four Tuple is	(swapped, STORE, 0, --)
        FOR index <- 1 BY 1 UNTIL /*not*/ index < length DO 
				Four Tuple is	(index, STORE, 1, --)
				Four Tuple is	(L$4, JUMP, --, --)
				Four Tuple is	(L$3, LABEL, --, --)
				Four Tuple is	(I$2, IADD, 1, index)
				Four Tuple is	(index, STORE, I$2, --)
				Four Tuple is	(L$4, LABEL, --, --)
				Four Tuple is	(B$1, ILT, index, length)
        IF numbers[index-1] > numbers[index]  THEN
				Four Tuple is	(L$5, CJUMPF, B$1, --)
				Four Tuple is	(I$3, IMINUS, 1, index)
				Four Tuple is	(I$4, SUBLOAD, numbers, I$3)
				Four Tuple is	(I$5, SUBLOAD, numbers, index)
          temp <- numbers[index-1] ;
				Four Tuple is	(B$2, IGT, I$4, I$5)
				Four Tuple is	(L$6, CJUMPF, B$2, --)
				Four Tuple is	(I$6, IMINUS, 1, index)
				Four Tuple is	(I$7, SUBLOAD, numbers, I$6)
				Four Tuple is	(temp, STORE, I$7, --)
          numbers[index-1] <- numbers[index] ;
				Four Tuple is	(I$8, IMINUS, 1, index)
				Four Tuple is	(I$9, SUBLOAD, numbers, index)
				Four Tuple is	(numbers, SUBSTORE, I$9, I$8)
          numbers[index] <- temp ;
				Four Tuple is	(numbers, SUBSTORE, temp, index)
          swapped <- 1 ; // swapped is one if numbers swapped, 0 otherwise
				Four Tuple is	(swapped, STORE, 1, --)
        END; // end if       
				Four Tuple is	(L$6, LABEL, --, --)
	END; //end for (index)	
				Four Tuple is	(L$3, JUMP, --, --)
				Four Tuple is	(L$5, LABEL, --, --)
    END; // end for (while)
				Four Tuple is	(L$0, JUMP, --, --)
				Four Tuple is	(L$2, LABEL, --, --)
	
    STOUT "Final Numbers %d, %d, %d, %d, %d \n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4];
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "Final Numbers %d, %d, %d, %d, %d \n", --)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 0)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 1)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 2)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 3)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, numbers, 4)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
    
  END  // end execute
END
				Four Tuple is	(--, ENDEXECUTION, --, --)
				Four Tuple is	(bubbleSort, ENDPROGRAM, --, --)
WOOT! Start symbol on STACK!
##### CREATED ASSEMBLY CODE WITH FOURTUPLE COMMENTS #####

#________(bubbleSort, BEGINPROGRAM, --, --)_________
	.section	.data
.SL0:	.string	"Original Numbers %d, %d, %d, %d, %d \n"
.SL1:	.string	"Final Numbers %d, %d, %d, %d, %d \n"
virtual:
		.long	0

#________(numbers, MEMORY, 5, 1)_________
numbers:	.space 20

#________(swapped, MEMORY, 1, 1)_________
swapped:
		.long	0

#________(index, MEMORY, 1, 1)_________
index:
		.long	0

#________(length, MEMORY, 1, 1)_________
length:
		.long	0

#________(temp, MEMORY, 1, 1)_________
temp:
		.long	0

#________(while, MEMORY, 1, 1)_________
while:
		.long	0

#________(--, ENDDECLARATIONS, --, --)_________

#________(main, LABEL, --, --)_________
	.globl main
	.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

#________(numbers, SUBSTORE, 12, 0)_________
	movl	$12, %ebx
	movl	$0, %ecx
	movl	%ebx, numbers(, %ecx, 4)

#________(numbers, SUBSTORE, 1000, 1)_________
	movl	$1000, %esi
	movl	$1, %edi
	movl	%esi, numbers(, %edi, 4)

#________(numbers, SUBSTORE, 40, 2)_________
	movl	$40, %esi
	movl	$2, %ebx
	movl	%esi, numbers(, %ebx, 4)

#________(I$0, IMINUS, 211, 0)_________
	movl	$211, %esi
	addl	%ecx, %esi
	negl	%esi

#________(numbers, SUBSTORE, I$0, 3)_________
	movl	$3, %edi
	movl	%esi, numbers(, %edi, 4)

#________(numbers, SUBSTORE, 8, 4)_________
	movl	$8, %esi
	movl	$4, %ecx
	movl	%esi, numbers(, %ecx, 4)

#________(length, STORE, 5, --)_________
	movl	$5, %ecx
	movl	%ecx, length

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "Original Numbers %d, %d, %d, %d, %d \n", --)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 0)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 1)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 2)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 3)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 4)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	movl	$4, %ecx
	pushl	numbers(, %ecx, 4)
	pushl	numbers(, %edi, 4)
	pushl	numbers(, %ebx, 4)
	movl	$1, %ecx
	pushl	numbers(, %ecx, 4)
	movl	$0, %esi
	pushl	numbers(, %esi, 4)
	pushl	$.SL0

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(swapped, STORE, 1, --)_________
	movl	$1, %ebx
	movl	%ebx, swapped

#________(index, STORE, 1, --)_________
	movl	$1, %ecx
	movl	%ecx, index

#________(while, STORE, 1, --)_________
	movl	$1, %esi
	movl	%esi, while

#________(L$1, JUMP, --, --)_________
	jmp	L$1

#________(L$0, LABEL, --, --)_________
L$0:

#________(I$1, IADD, 0, while)_________
	movl	while, %ebx
	movl	$0, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(while, STORE, I$1, --)_________
	movl	%esi, while

#________(L$1, LABEL, --, --)_________
L$1:

#________(B$0, IGT, swapped, 0)_________
	movl	$0, %ebx
	movl	swapped, %ecx
	cmpl	%ebx, %ecx

#________(L$2, CJUMPF, B$0, --)_________
#Removing from regSim: B$0
	jle	L$2

#________(swapped, STORE, 0, --)_________
	movl	%ebx, swapped

#________(index, STORE, 1, --)_________
	movl	$1, %edi
	movl	%edi, index

#________(L$4, JUMP, --, --)_________
	jmp	L$4

#________(L$3, LABEL, --, --)_________
L$3:

#________(I$2, IADD, 1, index)_________
	movl	index, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(index, STORE, I$2, --)_________
	movl	%esi, index

#________(L$4, LABEL, --, --)_________
L$4:

#________(B$1, ILT, index, length)_________
	movl	length, %ebx
	movl	index, %ecx
	cmpl	%ebx, %ecx

#________(L$5, CJUMPF, B$1, --)_________
#Removing from regSim: B$1
	jge	L$5

#________(I$3, IMINUS, 1, index)_________
	movl	$1, %edi
	movl	%ecx, %esi
	subl	%edi, %esi

#________(I$4, SUBLOAD, numbers, I$3)_________
	movl	numbers(,%esi,4), %esi

#________(I$5, SUBLOAD, numbers, index)_________
	movl	numbers(,%ecx,4), %edi

#________(B$2, IGT, I$4, I$5)_________
	cmpl	%edi, %esi

#________(L$6, CJUMPF, B$2, --)_________
#Removing from regSim: B$2
	jle	L$6

#________(I$6, IMINUS, 1, index)_________
	movl	$1, %edi
	movl	%ecx, %esi
	subl	%edi, %esi

#________(I$7, SUBLOAD, numbers, I$6)_________
	movl	numbers(,%esi,4), %esi

#________(temp, STORE, I$7, --)_________
	movl	%esi, temp

#________(I$8, IMINUS, 1, index)_________
	movl	%ecx, %esi
	subl	%edi, %esi

#________(I$9, SUBLOAD, numbers, index)_________
	movl	numbers(,%ecx,4), %edi

#________(numbers, SUBSTORE, I$9, I$8)_________
	movl	%edi, numbers(, %esi, 4)

#________(numbers, SUBSTORE, temp, index)_________
	movl	temp, %edi
	movl	%edi, numbers(, %ecx, 4)

#________(swapped, STORE, 1, --)_________
	movl	$1, %esi
	movl	%esi, swapped

#________(L$6, LABEL, --, --)_________
L$6:

#________(L$3, JUMP, --, --)_________
	jmp	L$3

#________(L$5, LABEL, --, --)_________
L$5:

#________(L$0, JUMP, --, --)_________
	jmp	L$0

#________(L$2, LABEL, --, --)_________
L$2:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "Final Numbers %d, %d, %d, %d, %d \n", --)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 0)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 1)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 2)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 3)_________

#________(--, SUBVALACTUALPARAMETER, numbers, 4)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	movl	$4, %ebx
	pushl	numbers(, %ebx, 4)
	movl	$3, %ecx
	pushl	numbers(, %ecx, 4)
	movl	$2, %esi
	pushl	numbers(, %esi, 4)
	movl	$1, %edi
	pushl	numbers(, %edi, 4)
	movl	$0, %ebx
	pushl	numbers(, %ebx, 4)
	pushl	$.SL1

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(--, ENDEXECUTION, --, --)_________
	leave

#________(bubbleSort, ENDPROGRAM, --, --)_________
	ret	
	.size	main, .-main
##### OUTPUT OF DEMONSTRATION PROGRAM #####
Original Numbers 12, 1000, 40, -211, 8 
Final Numbers -211, 8, 12, 40, 1000 
