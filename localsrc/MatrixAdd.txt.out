##### SOURCE CODE #####
##+1+13##
PROGRAM matrix   
  DECLARE        
      INTEGER MATRIX 4 :: 4 a,b,c ;
      INTEGER SCALAR i,j,k,l;
  END

  EXECUTE
  
  // Random numbers generated by Random.org on 28 Feb 2013
  //27	50	51	74	25	25	77	64	30	2	84	13	70	76	24  56
  //9	43	12	92	20	49	72	26	4	94	10	43	18	53	69	43
  
    a[0:0] <- 27;
    a[0:1] <- 50;
    a[0:2] <- 51;
    a[0:3] <- 74;
    a[1:0] <- 25;
    a[1:1] <- 25;
    a[1:2] <- 77;
    a[1:3] <- 64;
    a[2:0] <- 30;
    a[2:1] <- 2;
    a[2:2] <- 84;
    a[2:3] <- 13;
    a[3:0] <- 70;
    a[3:1] <- 76;
    a[3:2] <- 24;
    a[3:3] <- 56;

    b[0:0] <- 9;
    b[0:1] <- 43;
    b[0:2] <- 12;
    b[0:3] <- 92;
    b[1:0] <- 20;
    b[1:1] <- 49;
    b[1:2] <- 72;
    b[1:3] <- 26;
    b[2:0] <- 4;
    b[2:1] <- 94;
    b[2:2] <- 10;
    b[2:3] <- 43;
    b[3:0] <- 18;
    b[3:1] <- 53;
    b[3:2] <- 69;
    b[3:3] <- 43;

    // add the matrices 
    FOR i <- 0 BY 1 UNTIL /*not*/ i < 4 DO 
      FOR j <- 0 BY 1 UNTIL /*not*/ j < 4 DO
        c[i:j] <- a[i:j] + b[i:j];
      END;    // end for j
    END;    // end for i

	// print matrices

    FOR i <- 0 BY 1 UNTIL /*not*/ i < 4 DO     
	
	// print A

      IF (i == 0) THEN
        STOUT "A:" ;
      ELSE
        STOUT "  " ;
      END; // end if
      
      STOUT "[ " ;
      
      FOR j <- 0 BY 1 UNTIL /*not*/ j < 4 DO
        STOUT "%3d ",a[i:j];
      END; // end for j
      
      STOUT " ] " ;
      
      IF (i==1) THEN
        STOUT " + " ;
      ELSE
        STOUT "   " ;
      END; // end if
           
	// print B
    
      IF (i == 0) THEN
        STOUT "B:" ;
      ELSE
        STOUT "  " ;
      END; // end if
      
      STOUT "[ " ;
      
      FOR k <- 0 BY 1 UNTIL /*not*/ k < 4 DO
        STOUT "%3d ",b[i:k];
      END; // end for k
      
      STOUT " ] " ;
      
      IF (i==1) THEN
        STOUT " = " ;
      ELSE
        STOUT "   " ;
      END; // end if
      
// print C

      IF (i == 0) THEN
        STOUT "C:" ;
      ELSE
        STOUT "  " ;
      END; // end if
      
      STOUT "[ " ;
      
      FOR l <- 0 BY 1 UNTIL /*not*/ l < 4 DO
        STOUT "%3d ",c[i:l];
      END; // end for l
      
      STOUT " ] \n" ;
               
    END; // end if i     
    
    END

  END   

END
###### SOURCE CODE WITH FOURTUPLES #####
Name: John Ingram and W. Clay Moody
Email: {jei,wcm}@clemson.edu
Date: 2013/04/04 10:31:24



##+1+13##
PROGRAM matrix   
  DECLARE        
				Four Tuple is	(matrix, BEGINPROGRAM, --, --)
      INTEGER MATRIX 4 :: 4 a,b,c ;
				Four Tuple is	(a, MEMORY, 4, 4)
				Four Tuple is	(b, MEMORY, 4, 4)
				Four Tuple is	(c, MEMORY, 4, 4)
      INTEGER SCALAR i,j,k,l;
				Four Tuple is	(i, MEMORY, 1, 1)
				Four Tuple is	(j, MEMORY, 1, 1)
				Four Tuple is	(k, MEMORY, 1, 1)
				Four Tuple is	(l, MEMORY, 1, 1)
  END

  EXECUTE
				Four Tuple is	(--, ENDDECLARATIONS, --, --)
  
  // Random numbers generated by Random.org on 28 Feb 2013
  //27	50	51	74	25	25	77	64	30	2	84	13	70	76	24  56
  //9	43	12	92	20	49	72	26	4	94	10	43	18	53	69	43
  
    a[0:0] <- 27;
				Four Tuple is	(main, LABEL, --, --)
				Four Tuple is	(I$0, IMULT, 0, 4)
				Four Tuple is	(I$1, IADD, I$0, 0)
				Four Tuple is	(a, SUBSTORE, 27, I$1)
    a[0:1] <- 50;
				Four Tuple is	(I$2, IMULT, 0, 4)
				Four Tuple is	(I$3, IADD, I$2, 1)
				Four Tuple is	(a, SUBSTORE, 50, I$3)
    a[0:2] <- 51;
				Four Tuple is	(I$4, IMULT, 0, 4)
				Four Tuple is	(I$5, IADD, I$4, 2)
				Four Tuple is	(a, SUBSTORE, 51, I$5)
    a[0:3] <- 74;
				Four Tuple is	(I$6, IMULT, 0, 4)
				Four Tuple is	(I$7, IADD, I$6, 3)
				Four Tuple is	(a, SUBSTORE, 74, I$7)
    a[1:0] <- 25;
				Four Tuple is	(I$8, IMULT, 1, 4)
				Four Tuple is	(I$9, IADD, I$8, 0)
				Four Tuple is	(a, SUBSTORE, 25, I$9)
    a[1:1] <- 25;
				Four Tuple is	(I$10, IMULT, 1, 4)
				Four Tuple is	(I$11, IADD, I$10, 1)
				Four Tuple is	(a, SUBSTORE, 25, I$11)
    a[1:2] <- 77;
				Four Tuple is	(I$12, IMULT, 1, 4)
				Four Tuple is	(I$13, IADD, I$12, 2)
				Four Tuple is	(a, SUBSTORE, 77, I$13)
    a[1:3] <- 64;
				Four Tuple is	(I$14, IMULT, 1, 4)
				Four Tuple is	(I$15, IADD, I$14, 3)
				Four Tuple is	(a, SUBSTORE, 64, I$15)
    a[2:0] <- 30;
				Four Tuple is	(I$16, IMULT, 2, 4)
				Four Tuple is	(I$17, IADD, I$16, 0)
				Four Tuple is	(a, SUBSTORE, 30, I$17)
    a[2:1] <- 2;
				Four Tuple is	(I$18, IMULT, 2, 4)
				Four Tuple is	(I$19, IADD, I$18, 1)
				Four Tuple is	(a, SUBSTORE, 2, I$19)
    a[2:2] <- 84;
				Four Tuple is	(I$20, IMULT, 2, 4)
				Four Tuple is	(I$21, IADD, I$20, 2)
				Four Tuple is	(a, SUBSTORE, 84, I$21)
    a[2:3] <- 13;
				Four Tuple is	(I$22, IMULT, 2, 4)
				Four Tuple is	(I$23, IADD, I$22, 3)
				Four Tuple is	(a, SUBSTORE, 13, I$23)
    a[3:0] <- 70;
				Four Tuple is	(I$24, IMULT, 3, 4)
				Four Tuple is	(I$25, IADD, I$24, 0)
				Four Tuple is	(a, SUBSTORE, 70, I$25)
    a[3:1] <- 76;
				Four Tuple is	(I$26, IMULT, 3, 4)
				Four Tuple is	(I$27, IADD, I$26, 1)
				Four Tuple is	(a, SUBSTORE, 76, I$27)
    a[3:2] <- 24;
				Four Tuple is	(I$28, IMULT, 3, 4)
				Four Tuple is	(I$29, IADD, I$28, 2)
				Four Tuple is	(a, SUBSTORE, 24, I$29)
    a[3:3] <- 56;
				Four Tuple is	(I$30, IMULT, 3, 4)
				Four Tuple is	(I$31, IADD, I$30, 3)
				Four Tuple is	(a, SUBSTORE, 56, I$31)

    b[0:0] <- 9;
				Four Tuple is	(I$32, IMULT, 0, 4)
				Four Tuple is	(I$33, IADD, I$32, 0)
				Four Tuple is	(b, SUBSTORE, 9, I$33)
    b[0:1] <- 43;
				Four Tuple is	(I$34, IMULT, 0, 4)
				Four Tuple is	(I$35, IADD, I$34, 1)
				Four Tuple is	(b, SUBSTORE, 43, I$35)
    b[0:2] <- 12;
				Four Tuple is	(I$36, IMULT, 0, 4)
				Four Tuple is	(I$37, IADD, I$36, 2)
				Four Tuple is	(b, SUBSTORE, 12, I$37)
    b[0:3] <- 92;
				Four Tuple is	(I$38, IMULT, 0, 4)
				Four Tuple is	(I$39, IADD, I$38, 3)
				Four Tuple is	(b, SUBSTORE, 92, I$39)
    b[1:0] <- 20;
				Four Tuple is	(I$40, IMULT, 1, 4)
				Four Tuple is	(I$41, IADD, I$40, 0)
				Four Tuple is	(b, SUBSTORE, 20, I$41)
    b[1:1] <- 49;
				Four Tuple is	(I$42, IMULT, 1, 4)
				Four Tuple is	(I$43, IADD, I$42, 1)
				Four Tuple is	(b, SUBSTORE, 49, I$43)
    b[1:2] <- 72;
				Four Tuple is	(I$44, IMULT, 1, 4)
				Four Tuple is	(I$45, IADD, I$44, 2)
				Four Tuple is	(b, SUBSTORE, 72, I$45)
    b[1:3] <- 26;
				Four Tuple is	(I$46, IMULT, 1, 4)
				Four Tuple is	(I$47, IADD, I$46, 3)
				Four Tuple is	(b, SUBSTORE, 26, I$47)
    b[2:0] <- 4;
				Four Tuple is	(I$48, IMULT, 2, 4)
				Four Tuple is	(I$49, IADD, I$48, 0)
				Four Tuple is	(b, SUBSTORE, 4, I$49)
    b[2:1] <- 94;
				Four Tuple is	(I$50, IMULT, 2, 4)
				Four Tuple is	(I$51, IADD, I$50, 1)
				Four Tuple is	(b, SUBSTORE, 94, I$51)
    b[2:2] <- 10;
				Four Tuple is	(I$52, IMULT, 2, 4)
				Four Tuple is	(I$53, IADD, I$52, 2)
				Four Tuple is	(b, SUBSTORE, 10, I$53)
    b[2:3] <- 43;
				Four Tuple is	(I$54, IMULT, 2, 4)
				Four Tuple is	(I$55, IADD, I$54, 3)
				Four Tuple is	(b, SUBSTORE, 43, I$55)
    b[3:0] <- 18;
				Four Tuple is	(I$56, IMULT, 3, 4)
				Four Tuple is	(I$57, IADD, I$56, 0)
				Four Tuple is	(b, SUBSTORE, 18, I$57)
    b[3:1] <- 53;
				Four Tuple is	(I$58, IMULT, 3, 4)
				Four Tuple is	(I$59, IADD, I$58, 1)
				Four Tuple is	(b, SUBSTORE, 53, I$59)
    b[3:2] <- 69;
				Four Tuple is	(I$60, IMULT, 3, 4)
				Four Tuple is	(I$61, IADD, I$60, 2)
				Four Tuple is	(b, SUBSTORE, 69, I$61)
    b[3:3] <- 43;
				Four Tuple is	(I$62, IMULT, 3, 4)
				Four Tuple is	(I$63, IADD, I$62, 3)
				Four Tuple is	(b, SUBSTORE, 43, I$63)

    // add the matrices 
    FOR i <- 0 BY 1 UNTIL /*not*/ i < 4 DO 
				Four Tuple is	(i, STORE, 0, --)
				Four Tuple is	(L$1, JUMP, --, --)
				Four Tuple is	(L$0, LABEL, --, --)
				Four Tuple is	(I$64, IADD, 1, i)
				Four Tuple is	(i, STORE, I$64, --)
				Four Tuple is	(L$1, LABEL, --, --)
				Four Tuple is	(B$0, ILT, i, 4)
      FOR j <- 0 BY 1 UNTIL /*not*/ j < 4 DO
				Four Tuple is	(L$2, CJUMPF, B$0, --)
				Four Tuple is	(j, STORE, 0, --)
				Four Tuple is	(L$4, JUMP, --, --)
				Four Tuple is	(L$3, LABEL, --, --)
				Four Tuple is	(I$65, IADD, 1, j)
				Four Tuple is	(j, STORE, I$65, --)
				Four Tuple is	(L$4, LABEL, --, --)
        c[i:j] <- a[i:j] + b[i:j];
				Four Tuple is	(B$1, ILT, j, 4)
				Four Tuple is	(L$5, CJUMPF, B$1, --)
				Four Tuple is	(I$66, IMULT, i, 4)
				Four Tuple is	(I$67, IADD, I$66, j)
				Four Tuple is	(I$68, SUBLOAD, a, I$67)
				Four Tuple is	(I$69, IMULT, i, 4)
				Four Tuple is	(I$70, IADD, I$69, j)
				Four Tuple is	(I$71, SUBLOAD, b, I$70)
				Four Tuple is	(I$72, IADD, I$71, I$68)
				Four Tuple is	(I$73, IMULT, i, 4)
				Four Tuple is	(I$74, IADD, I$73, j)
				Four Tuple is	(c, SUBSTORE, I$72, I$74)
      END;    // end for j
				Four Tuple is	(L$3, JUMP, --, --)
				Four Tuple is	(L$5, LABEL, --, --)
    END;    // end for i
				Four Tuple is	(L$0, JUMP, --, --)
				Four Tuple is	(L$2, LABEL, --, --)

	// print matrices

    FOR i <- 0 BY 1 UNTIL /*not*/ i < 4 DO     
				Four Tuple is	(i, STORE, 0, --)
				Four Tuple is	(L$7, JUMP, --, --)
				Four Tuple is	(L$6, LABEL, --, --)
				Four Tuple is	(I$75, IADD, 1, i)
				Four Tuple is	(i, STORE, I$75, --)
				Four Tuple is	(L$7, LABEL, --, --)
				Four Tuple is	(B$2, ILT, i, 4)
	
	// print A

      IF (i == 0) THEN
				Four Tuple is	(L$8, CJUMPF, B$2, --)
				Four Tuple is	(B$3, IEQUAL, i, 0)
        STOUT "A:" ;
				Four Tuple is	(L$9, CJUMPF, B$3, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "A:", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      ELSE
        STOUT "  " ;
				Four Tuple is	(L$10, JUMP, --, --)
				Four Tuple is	(L$9, LABEL, --, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "  ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end if
				Four Tuple is	(L$10, LABEL, --, --)
      
      STOUT "[ " ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "[ ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      
      FOR j <- 0 BY 1 UNTIL /*not*/ j < 4 DO
				Four Tuple is	(j, STORE, 0, --)
				Four Tuple is	(L$12, JUMP, --, --)
				Four Tuple is	(L$11, LABEL, --, --)
				Four Tuple is	(I$76, IADD, 1, j)
				Four Tuple is	(j, STORE, I$76, --)
				Four Tuple is	(L$12, LABEL, --, --)
        STOUT "%3d ",a[i:j];
				Four Tuple is	(B$4, ILT, j, 4)
				Four Tuple is	(L$13, CJUMPF, B$4, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "%3d ", --)
				Four Tuple is	(I$77, IMULT, i, 4)
				Four Tuple is	(I$78, IADD, I$77, j)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, a, I$78)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end for j
				Four Tuple is	(L$11, JUMP, --, --)
				Four Tuple is	(L$13, LABEL, --, --)
      
      STOUT " ] " ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, " ] ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      
      IF (i==1) THEN
				Four Tuple is	(B$5, IEQUAL, i, 1)
        STOUT " + " ;
				Four Tuple is	(L$14, CJUMPF, B$5, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, " + ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      ELSE
        STOUT "   " ;
				Four Tuple is	(L$15, JUMP, --, --)
				Four Tuple is	(L$14, LABEL, --, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "   ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end if
				Four Tuple is	(L$15, LABEL, --, --)
           
	// print B
    
      IF (i == 0) THEN
				Four Tuple is	(B$6, IEQUAL, i, 0)
        STOUT "B:" ;
				Four Tuple is	(L$16, CJUMPF, B$6, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "B:", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      ELSE
        STOUT "  " ;
				Four Tuple is	(L$17, JUMP, --, --)
				Four Tuple is	(L$16, LABEL, --, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "  ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end if
				Four Tuple is	(L$17, LABEL, --, --)
      
      STOUT "[ " ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "[ ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      
      FOR k <- 0 BY 1 UNTIL /*not*/ k < 4 DO
				Four Tuple is	(k, STORE, 0, --)
				Four Tuple is	(L$19, JUMP, --, --)
				Four Tuple is	(L$18, LABEL, --, --)
				Four Tuple is	(I$79, IADD, 1, k)
				Four Tuple is	(k, STORE, I$79, --)
				Four Tuple is	(L$19, LABEL, --, --)
        STOUT "%3d ",b[i:k];
				Four Tuple is	(B$7, ILT, k, 4)
				Four Tuple is	(L$20, CJUMPF, B$7, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "%3d ", --)
				Four Tuple is	(I$80, IMULT, i, 4)
				Four Tuple is	(I$81, IADD, I$80, k)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, b, I$81)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end for k
				Four Tuple is	(L$18, JUMP, --, --)
				Four Tuple is	(L$20, LABEL, --, --)
      
      STOUT " ] " ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, " ] ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      
      IF (i==1) THEN
				Four Tuple is	(B$8, IEQUAL, i, 1)
        STOUT " = " ;
				Four Tuple is	(L$21, CJUMPF, B$8, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, " = ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      ELSE
        STOUT "   " ;
				Four Tuple is	(L$22, JUMP, --, --)
				Four Tuple is	(L$21, LABEL, --, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "   ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end if
				Four Tuple is	(L$22, LABEL, --, --)
      
// print C

      IF (i == 0) THEN
				Four Tuple is	(B$9, IEQUAL, i, 0)
        STOUT "C:" ;
				Four Tuple is	(L$23, CJUMPF, B$9, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "C:", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      ELSE
        STOUT "  " ;
				Four Tuple is	(L$24, JUMP, --, --)
				Four Tuple is	(L$23, LABEL, --, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "  ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end if
				Four Tuple is	(L$24, LABEL, --, --)
      
      STOUT "[ " ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "[ ", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      
      FOR l <- 0 BY 1 UNTIL /*not*/ l < 4 DO
				Four Tuple is	(l, STORE, 0, --)
				Four Tuple is	(L$26, JUMP, --, --)
				Four Tuple is	(L$25, LABEL, --, --)
				Four Tuple is	(I$82, IADD, 1, l)
				Four Tuple is	(l, STORE, I$82, --)
				Four Tuple is	(L$26, LABEL, --, --)
        STOUT "%3d ",c[i:l];
				Four Tuple is	(B$10, ILT, l, 4)
				Four Tuple is	(L$27, CJUMPF, B$10, --)
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "%3d ", --)
				Four Tuple is	(I$83, IMULT, i, 4)
				Four Tuple is	(I$84, IADD, I$83, l)
				Four Tuple is	(--, SUBVALACTUALPARAMETER, c, I$84)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      END; // end for l
				Four Tuple is	(L$25, JUMP, --, --)
				Four Tuple is	(L$27, LABEL, --, --)
      
      STOUT " ] \n" ;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, " ] \n", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
               
    END; // end if i     
				Four Tuple is	(L$6, JUMP, --, --)
				Four Tuple is	(L$8, LABEL, --, --)
    
    END

  END   
				Four Tuple is	(--, ENDEXECUTION, --, --)

END
				Four Tuple is	(matrix, ENDPROGRAM, --, --)
WOOT! Start symbol on STACK!
##### CREATED ASSEMBLY CODE WITH FOURTUPLE COMMENTS #####

#________(matrix, BEGINPROGRAM, --, --)_________
	.section	.data
.SL5:	.string	" + "
.SL0:	.string	"A:"
.SL7:	.string	"B:"
.SL13:	.string	"   "
.SL11:	.string	" ] "
.SL14:	.string	"C:"
.SL17:	.string	"%3d "
.SL16:	.string	"[ "
.SL12:	.string	" = "
.SL15:	.string	"  "
.SL18:	.string	" ] \n"
virtual:
		.long	0

#________(a, MEMORY, 4, 4)_________
a:	.space 64

#________(b, MEMORY, 4, 4)_________
b:	.space 64

#________(c, MEMORY, 4, 4)_________
c:	.space 64

#________(i, MEMORY, 1, 1)_________
i:
		.long	0

#________(j, MEMORY, 1, 1)_________
j:
		.long	0

#________(k, MEMORY, 1, 1)_________
k:
		.long	0

#________(l, MEMORY, 1, 1)_________
l:
		.long	0

#________(--, ENDDECLARATIONS, --, --)_________

#________(main, LABEL, --, --)_________
	.globl main
	.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

#________(I$0, IMULT, 0, 4)_________
	movl	$0, %ebx
	movl	$4, %ecx
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%ecx
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$1, IADD, I$0, 0)_________
	movl	%ebx, %edi
	addl	%esi, %edi

#________(a, SUBSTORE, 27, I$1)_________
	movl	$27, %esi
	movl	%esi, a(, %edi, 4)

#________(I$2, IMULT, 0, 4)_________
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%ecx
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$3, IADD, I$2, 1)_________
	movl	$1, %ecx
	addl	%ecx, %edi

#________(a, SUBSTORE, 50, I$3)_________
	movl	$50, %ecx
	movl	%ecx, a(, %edi, 4)

#________(I$4, IMULT, 0, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$5, IADD, I$4, 2)_________
	movl	$2, %ecx
	addl	%ecx, %edi

#________(a, SUBSTORE, 51, I$5)_________
	movl	$51, %esi
	movl	%esi, a(, %edi, 4)

#________(I$6, IMULT, 0, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$7, IADD, I$6, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 74, I$7)_________
	movl	$74, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$8, IMULT, 1, 4)_________
	movl	$1, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$9, IADD, I$8, 0)_________
	movl	$0, %edi
	addl	%edi, %ebx

#________(a, SUBSTORE, 25, I$9)_________
	movl	$25, %edi
	movl	%edi, a(, %ebx, 4)

#________(I$10, IMULT, 1, 4)_________
	movl	$1, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$11, IADD, I$10, 1)_________
	addl	%ebx, %edi

#________(a, SUBSTORE, 25, I$11)_________
	movl	$25, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$12, IMULT, 1, 4)_________
	movl	$1, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$13, IADD, I$12, 2)_________
	addl	%ecx, %ebx

#________(a, SUBSTORE, 77, I$13)_________
	movl	$77, %edi
	movl	%edi, a(, %ebx, 4)

#________(I$14, IMULT, 1, 4)_________
	movl	$1, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$15, IADD, I$14, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 64, I$15)_________
	movl	$64, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$16, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$17, IADD, I$16, 0)_________
	movl	$0, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 30, I$17)_________
	movl	$30, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$18, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$19, IADD, I$18, 1)_________
	movl	$1, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 2, I$19)_________
	movl	%ecx, a(, %edi, 4)

#________(I$20, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$21, IADD, I$20, 2)_________
	addl	%ecx, %edi

#________(a, SUBSTORE, 84, I$21)_________
	movl	$84, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$22, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$23, IADD, I$22, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 13, I$23)_________
	movl	$13, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$24, IMULT, 3, 4)_________
	movl	$3, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$25, IADD, I$24, 0)_________
	movl	$0, %edi
	addl	%edi, %ebx

#________(a, SUBSTORE, 70, I$25)_________
	movl	$70, %edi
	movl	%edi, a(, %ebx, 4)

#________(I$26, IMULT, 3, 4)_________
	movl	$3, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$27, IADD, I$26, 1)_________
	movl	$1, %ebx
	addl	%ebx, %edi

#________(a, SUBSTORE, 76, I$27)_________
	movl	$76, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$28, IMULT, 3, 4)_________
	movl	$3, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$29, IADD, I$28, 2)_________
	addl	%ecx, %ebx

#________(a, SUBSTORE, 24, I$29)_________
	movl	$24, %edi
	movl	%edi, a(, %ebx, 4)

#________(I$30, IMULT, 3, 4)_________
	movl	$3, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$31, IADD, I$30, 3)_________
	addl	%ebx, %edi

#________(a, SUBSTORE, 56, I$31)_________
	movl	$56, %ebx
	movl	%ebx, a(, %edi, 4)

#________(I$32, IMULT, 0, 4)_________
	movl	$0, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$33, IADD, I$32, 0)_________
	addl	%edi, %ebx

#________(b, SUBSTORE, 9, I$33)_________
	movl	$9, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$34, IMULT, 0, 4)_________
	movl	$0, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$35, IADD, I$34, 1)_________
	movl	$1, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 43, I$35)_________
	movl	$43, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$36, IMULT, 0, 4)_________
	movl	$0, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$37, IADD, I$36, 2)_________
	addl	%ecx, %ebx

#________(b, SUBSTORE, 12, I$37)_________
	movl	$12, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$38, IMULT, 0, 4)_________
	movl	$0, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$39, IADD, I$38, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 92, I$39)_________
	movl	$92, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$40, IMULT, 1, 4)_________
	movl	$1, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$41, IADD, I$40, 0)_________
	movl	$0, %edi
	addl	%edi, %ebx

#________(b, SUBSTORE, 20, I$41)_________
	movl	$20, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$42, IMULT, 1, 4)_________
	movl	$1, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$43, IADD, I$42, 1)_________
	addl	%ebx, %edi

#________(b, SUBSTORE, 49, I$43)_________
	movl	$49, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$44, IMULT, 1, 4)_________
	movl	$1, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$45, IADD, I$44, 2)_________
	addl	%ecx, %ebx

#________(b, SUBSTORE, 72, I$45)_________
	movl	$72, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$46, IMULT, 1, 4)_________
	movl	$1, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$47, IADD, I$46, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 26, I$47)_________
	movl	$26, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$48, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$49, IADD, I$48, 0)_________
	movl	$0, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 4, I$49)_________
	movl	$4, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$50, IMULT, 2, 4)_________
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%ebx
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$51, IADD, I$50, 1)_________
	movl	$1, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 94, I$51)_________
	movl	$94, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$52, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$53, IADD, I$52, 2)_________
	addl	%ecx, %edi

#________(b, SUBSTORE, 10, I$53)_________
	movl	$10, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$54, IMULT, 2, 4)_________
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ecx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$55, IADD, I$54, 3)_________
	movl	$3, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 43, I$55)_________
	movl	$43, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$56, IMULT, 3, 4)_________
	movl	$3, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$57, IADD, I$56, 0)_________
	movl	$0, %edi
	addl	%edi, %ebx

#________(b, SUBSTORE, 18, I$57)_________
	movl	$18, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$58, IMULT, 3, 4)_________
	movl	$3, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$59, IADD, I$58, 1)_________
	movl	$1, %ebx
	addl	%ebx, %edi

#________(b, SUBSTORE, 53, I$59)_________
	movl	$53, %ebx
	movl	%ebx, b(, %edi, 4)

#________(I$60, IMULT, 3, 4)_________
	movl	$3, %edi
	movl	$4, %ebx
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$61, IADD, I$60, 2)_________
	addl	%ecx, %ebx

#________(b, SUBSTORE, 69, I$61)_________
	movl	$69, %edi
	movl	%edi, b(, %ebx, 4)

#________(I$62, IMULT, 3, 4)_________
	movl	$3, %ebx
	movl	$4, %edi
	pushl	%eax
	pushl	%edx
	movl	%ebx, %eax
	mull	%edi
	movl	%eax, %edi
	popl	%edx
	popl	%eax

#________(I$63, IADD, I$62, 3)_________
	addl	%ebx, %edi

#________(b, SUBSTORE, 43, I$63)_________
	movl	$43, %ebx
	movl	%ebx, b(, %edi, 4)

#________(i, STORE, 0, --)_________
	movl	$0, %edi
	movl	%edi, i

#________(L$1, JUMP, --, --)_________
	jmp	L$1

#________(L$0, LABEL, --, --)_________
L$0:

#________(I$64, IADD, 1, i)_________
	movl	i, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(i, STORE, I$64, --)_________
	movl	%esi, i

#________(L$1, LABEL, --, --)_________
L$1:

#________(B$0, ILT, i, 4)_________
	movl	$4, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$2, CJUMPF, B$0, --)_________
#Removing from regSim: B$0
	jge	L$2

#________(j, STORE, 0, --)_________
	movl	$0, %edi
	movl	%edi, j

#________(L$4, JUMP, --, --)_________
	jmp	L$4

#________(L$3, LABEL, --, --)_________
L$3:

#________(I$65, IADD, 1, j)_________
	movl	j, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(j, STORE, I$65, --)_________
	movl	%esi, j

#________(L$4, LABEL, --, --)_________
L$4:

#________(B$1, ILT, j, 4)_________
	movl	$4, %ebx
	movl	j, %ecx
	cmpl	%ebx, %ecx

#________(L$5, CJUMPF, B$1, --)_________
#Removing from regSim: B$1
	jge	L$5

#________(I$66, IMULT, i, 4)_________
	movl	i, %edi
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$67, IADD, I$66, j)_________
	addl	%ecx, %esi

#________(I$68, SUBLOAD, a, I$67)_________
	movl	a(,%esi,4), %esi

#________(I$69, IMULT, i, 4)_________
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %ebx
	popl	%edx
	popl	%eax

#________(I$70, IADD, I$69, j)_________
	addl	%ecx, %ebx

#________(I$71, SUBLOAD, b, I$70)_________
	movl	b(,%ebx,4), %ebx

#________(I$72, IADD, I$71, I$68)_________
	addl	%esi, %ebx

#________(I$73, IMULT, i, 4)_________
	movl	$4, %esi
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%esi
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$74, IADD, I$73, j)_________
	addl	%ecx, %esi

#________(c, SUBSTORE, I$72, I$74)_________
	movl	%ebx, c(, %esi, 4)

#________(L$3, JUMP, --, --)_________
	jmp	L$3

#________(L$5, LABEL, --, --)_________
L$5:

#________(L$0, JUMP, --, --)_________
	jmp	L$0

#________(L$2, LABEL, --, --)_________
L$2:

#________(i, STORE, 0, --)_________
	movl	$0, %ebx
	movl	%ebx, i

#________(L$7, JUMP, --, --)_________
	jmp	L$7

#________(L$6, LABEL, --, --)_________
L$6:

#________(I$75, IADD, 1, i)_________
	movl	i, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(i, STORE, I$75, --)_________
	movl	%esi, i

#________(L$7, LABEL, --, --)_________
L$7:

#________(B$2, ILT, i, 4)_________
	movl	$4, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$8, CJUMPF, B$2, --)_________
#Removing from regSim: B$2
	jge	L$8

#________(B$3, IEQUAL, i, 0)_________
	movl	$0, %edi
	cmpl	%edi, %ecx

#________(L$9, CJUMPF, B$3, --)_________
#Removing from regSim: B$3
	jne	L$9

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "A:", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL0

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$10, JUMP, --, --)_________
	jmp	L$10

#________(L$9, LABEL, --, --)_________
L$9:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "  ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL15

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$10, LABEL, --, --)_________
L$10:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "[ ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL16

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(j, STORE, 0, --)_________
	movl	$0, %ebx
	movl	%ebx, j

#________(L$12, JUMP, --, --)_________
	jmp	L$12

#________(L$11, LABEL, --, --)_________
L$11:

#________(I$76, IADD, 1, j)_________
	movl	j, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(j, STORE, I$76, --)_________
	movl	%esi, j

#________(L$12, LABEL, --, --)_________
L$12:

#________(B$4, ILT, j, 4)_________
	movl	$4, %ebx
	movl	j, %ecx
	cmpl	%ebx, %ecx

#________(L$13, CJUMPF, B$4, --)_________
#Removing from regSim: B$4
	jge	L$13

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "%3d ", --)_________

#________(I$77, IMULT, i, 4)_________
	movl	i, %edi
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$78, IADD, I$77, j)_________
	addl	%ecx, %esi

#________(--, SUBVALACTUALPARAMETER, a, I$78)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	a(, %esi, 4)
	pushl	$.SL17

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$11, JUMP, --, --)_________
	jmp	L$11

#________(L$13, LABEL, --, --)_________
L$13:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, " ] ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL11

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(B$5, IEQUAL, i, 1)_________
	movl	$1, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$14, CJUMPF, B$5, --)_________
#Removing from regSim: B$5
	jne	L$14

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, " + ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL5

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$15, JUMP, --, --)_________
	jmp	L$15

#________(L$14, LABEL, --, --)_________
L$14:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "   ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL13

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$15, LABEL, --, --)_________
L$15:

#________(B$6, IEQUAL, i, 0)_________
	movl	$0, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$16, CJUMPF, B$6, --)_________
#Removing from regSim: B$6
	jne	L$16

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "B:", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL7

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$17, JUMP, --, --)_________
	jmp	L$17

#________(L$16, LABEL, --, --)_________
L$16:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "  ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL15

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$17, LABEL, --, --)_________
L$17:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "[ ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL16

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(k, STORE, 0, --)_________
	movl	$0, %ebx
	movl	%ebx, k

#________(L$19, JUMP, --, --)_________
	jmp	L$19

#________(L$18, LABEL, --, --)_________
L$18:

#________(I$79, IADD, 1, k)_________
	movl	k, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(k, STORE, I$79, --)_________
	movl	%esi, k

#________(L$19, LABEL, --, --)_________
L$19:

#________(B$7, ILT, k, 4)_________
	movl	$4, %ebx
	movl	k, %ecx
	cmpl	%ebx, %ecx

#________(L$20, CJUMPF, B$7, --)_________
#Removing from regSim: B$7
	jge	L$20

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "%3d ", --)_________

#________(I$80, IMULT, i, 4)_________
	movl	i, %edi
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$81, IADD, I$80, k)_________
	addl	%ecx, %esi

#________(--, SUBVALACTUALPARAMETER, b, I$81)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	b(, %esi, 4)
	pushl	$.SL17

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$18, JUMP, --, --)_________
	jmp	L$18

#________(L$20, LABEL, --, --)_________
L$20:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, " ] ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL11

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(B$8, IEQUAL, i, 1)_________
	movl	$1, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$21, CJUMPF, B$8, --)_________
#Removing from regSim: B$8
	jne	L$21

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, " = ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL12

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$22, JUMP, --, --)_________
	jmp	L$22

#________(L$21, LABEL, --, --)_________
L$21:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "   ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL13

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$22, LABEL, --, --)_________
L$22:

#________(B$9, IEQUAL, i, 0)_________
	movl	$0, %ebx
	movl	i, %ecx
	cmpl	%ebx, %ecx

#________(L$23, CJUMPF, B$9, --)_________
#Removing from regSim: B$9
	jne	L$23

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "C:", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL14

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$24, JUMP, --, --)_________
	jmp	L$24

#________(L$23, LABEL, --, --)_________
L$23:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "  ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL15

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$24, LABEL, --, --)_________
L$24:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "[ ", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL16

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(l, STORE, 0, --)_________
	movl	$0, %ebx
	movl	%ebx, l

#________(L$26, JUMP, --, --)_________
	jmp	L$26

#________(L$25, LABEL, --, --)_________
L$25:

#________(I$82, IADD, 1, l)_________
	movl	l, %ebx
	movl	$1, %ecx
	movl	%ebx, %esi
	addl	%ecx, %esi

#________(l, STORE, I$82, --)_________
	movl	%esi, l

#________(L$26, LABEL, --, --)_________
L$26:

#________(B$10, ILT, l, 4)_________
	movl	$4, %ebx
	movl	l, %ecx
	cmpl	%ebx, %ecx

#________(L$27, CJUMPF, B$10, --)_________
#Removing from regSim: B$10
	jge	L$27

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "%3d ", --)_________

#________(I$83, IMULT, i, 4)_________
	movl	i, %edi
	pushl	%eax
	pushl	%edx
	movl	%edi, %eax
	mull	%ebx
	movl	%eax, %esi
	popl	%edx
	popl	%eax

#________(I$84, IADD, I$83, l)_________
	addl	%ecx, %esi

#________(--, SUBVALACTUALPARAMETER, c, I$84)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	c(, %esi, 4)
	pushl	$.SL17

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$25, JUMP, --, --)_________
	jmp	L$25

#________(L$27, LABEL, --, --)_________
L$27:

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, " ] \n", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL18

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(L$6, JUMP, --, --)_________
	jmp	L$6

#________(L$8, LABEL, --, --)_________
L$8:

#________(--, ENDEXECUTION, --, --)_________
	leave

#________(matrix, ENDPROGRAM, --, --)_________
	ret	
	.size	main, .-main
##### OUTPUT OF DEMONSTRATION PROGRAM #####
A:[  27  50  51  74  ]    B:[   9  43  12  92  ]    C:[  36  93  63 166  ] 
  [  25  25  77  64  ]  +   [  20  49  72  26  ]  =   [  45  74 149  90  ] 
  [  30   2  84  13  ]      [   4  94  10  43  ]      [  34  96  94  56  ] 
  [  70  76  24  56  ]      [  18  53  69  43  ]      [  88 129  93  99  ] 
