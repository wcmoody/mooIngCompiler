##### SOURCE CODE #####
##+1+13##
PROGRAM recursive
  DECLARE
	INTEGER SCALAR c;
  END

  PROCEDURE callMe{VALUE INTEGER SCALAR count}  
    
    DECLARE
    	INTEGER SCALAR notused;
    END
    
    IF (count < 10) THEN
      count <- count + 1;
      STOUT "Count is %d \n", count;
      CALL callMe{VALUE count} ;
    END; //end if 
    
  END  // callMe  


  EXECUTE
       c <- 0;
       CALL callMe {VALUE c};
       STOUT "We are done \n"; 
  END   

END

###### SOURCE CODE WITH FOURTUPLES #####
Name: John Ingram and W. Clay Moody
Email: {jei,wcm}@clemson.edu
Date: 2013/04/04 10:31:42



##+1+13##
PROGRAM recursive
  DECLARE
				Four Tuple is	(recursive, BEGINPROGRAM, --, --)
	INTEGER SCALAR c;
				Four Tuple is	(c, MEMORY, 1, 1)
  END

  PROCEDURE callMe{VALUE INTEGER SCALAR count}  
				Four Tuple is	(--, ENDDECLARATIONS, --, --)
				Four Tuple is	(callMe, BEGINPROCEDURE, --, --)
				Four Tuple is	(--, BEGINFORMALPARAMETERLIST, --, --)
				Four Tuple is	(count, FORMALVALPARAMETER, 1, 1)
    
    DECLARE
				Four Tuple is	(--, ENDFORMALPARAMETERLIST, --, --)
    	INTEGER SCALAR notused;
				Four Tuple is	(notused, MEMORY, 1, 1)
    END
    
    IF (count < 10) THEN
				Four Tuple is	(--, ENDDECLARATIONS, --, --)
				Four Tuple is	(B$0, ILT, count, 10)
      count <- count + 1;
				Four Tuple is	(L$0, CJUMPF, B$0, --)
				Four Tuple is	(I$0, IADD, 1, count)
				Four Tuple is	(count, STORE, I$0, --)
      STOUT "Count is %d \n", count;
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "Count is %d \n", --)
				Four Tuple is	(--, VALACTUALPARAMETER, count, --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
      CALL callMe{VALUE count} ;
				Four Tuple is	(callMe, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, count, --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(callMe, ENDPROCEDURECALL, --, --)
    END; //end if 
				Four Tuple is	(L$0, LABEL, --, --)
    
  END  // callMe  


  EXECUTE
				Four Tuple is	(callMe, ENDPROCEDURE, --, --)
       c <- 0;
				Four Tuple is	(main, LABEL, --, --)
				Four Tuple is	(c, STORE, 0, --)
       CALL callMe {VALUE c};
				Four Tuple is	(callMe, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, c, --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(callMe, ENDPROCEDURECALL, --, --)
       STOUT "We are done \n"; 
				Four Tuple is	(printf, PROCEDURECALL, --, --)
				Four Tuple is	(--, BEGINACTUALPARAMETERLIST, --, --)
				Four Tuple is	(--, VALACTUALPARAMETER, "We are done \n", --)
				Four Tuple is	(--, ENDACTUALPARAMETERLIST, --, --)
				Four Tuple is	(printf, ENDPROCEDURECALL, --, --)
  END   

END
				Four Tuple is	(--, ENDEXECUTION, --, --)
				Four Tuple is	(recursive, ENDPROGRAM, --, --)
WOOT! Start symbol on STACK!
##### CREATED ASSEMBLY CODE WITH FOURTUPLE COMMENTS #####

#________(recursive, BEGINPROGRAM, --, --)_________
	.section	.data
.SL0:	.string	"Count is %d \n"
.SL1:	.string	"We are done \n"
virtual:
		.long	0

#________(c, MEMORY, 1, 1)_________
c:
		.long	0

#________(--, ENDDECLARATIONS, --, --)_________

#________(callMe, BEGINPROCEDURE, --, --)_________
	.text
	.globl callMe
	.type callMe, @function
callMe:
	.section	.data

#________(--, BEGINFORMALPARAMETERLIST, --, --)_________

#________(count, FORMALVALPARAMETER, 1, 1)_________

#________(--, ENDFORMALPARAMETERLIST, --, --)_________
#allocate memory for value parameter: count
count:
		.long	0

#________(notused, MEMORY, 1, 1)_________
notused:
		.long	0

#________(--, ENDDECLARATIONS, --, --)_________
	.text
	pushl	%ebp
	movl	%esp, %ebp
#retrieve value for parameter: count
	movl	8(%ebp), %ebx
	movl	%ebx, count

#________(B$0, ILT, count, 10)_________
	movl	$10, %ecx
	cmpl	%ecx, %ebx

#________(L$0, CJUMPF, B$0, --)_________
#Removing from regSim: B$0
	jge	L$0

#________(I$0, IADD, 1, count)_________
	movl	$1, %edi
	movl	%ebx, %esi
	addl	%edi, %esi

#________(count, STORE, I$0, --)_________
	movl	%esi, count

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "Count is %d \n", --)_________

#________(--, VALACTUALPARAMETER, count, --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	count
	pushl	$.SL0

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(callMe, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, count, --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	count

#________(callMe, ENDPROCEDURECALL, --, --)_________
	call	callMe

#________(L$0, LABEL, --, --)_________
L$0:

#________(callMe, ENDPROCEDURE, --, --)_________
	leave	
	ret	
	.size	callMe, .-callMe

#________(main, LABEL, --, --)_________
	.globl main
	.type main, @function
main:
	pushl	%ebp
	movl	%esp, %ebp

#________(c, STORE, 0, --)_________
	movl	$0, %ebx
	movl	%ebx, c

#________(callMe, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, c, --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	c

#________(callMe, ENDPROCEDURECALL, --, --)_________
	call	callMe

#________(printf, PROCEDURECALL, --, --)_________

#________(--, BEGINACTUALPARAMETERLIST, --, --)_________

#________(--, VALACTUALPARAMETER, "We are done \n", --)_________

#________(--, ENDACTUALPARAMETERLIST, --, --)_________
	pushl	$.SL1

#________(printf, ENDPROCEDURECALL, --, --)_________
	call	printf

#________(--, ENDEXECUTION, --, --)_________
	leave

#________(recursive, ENDPROGRAM, --, --)_________
	ret	
	.size	main, .-main
##### OUTPUT OF DEMONSTRATION PROGRAM #####
Count is 1 
Count is 2 
Count is 3 
Count is 4 
Count is 5 
Count is 6 
Count is 7 
Count is 8 
Count is 9 
Count is 10 
We are done 
